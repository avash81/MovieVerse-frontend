{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\nconst apiCall = async (endpoint, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.msg || 'API request failed');\n    }\n    return {\n      data\n    };\n  } catch (error) {\n    console.error(`API error at ${endpoint}:`, error);\n    throw error;\n  }\n};\nexport const getCategory = async categoryId => {\n  return apiCall(`/movies/categories/${categoryId}`);\n};\nexport const getNotices = async () => {\n  return apiCall('/movies/notices');\n};\nexport const getMovieDetails = async (source, externalId) => {\n  return apiCall(`/movies/details/${source}/${externalId}`);\n};\nexport const getReviews = async (source, externalId) => {\n  return apiCall(`/reviews/${source}/${externalId}`);\n};\nexport const submitReview = async (source, externalId, reviewData) => {\n  return apiCall(`/reviews/${source}/${externalId}`, {\n    method: 'POST',\n    body: JSON.stringify(reviewData)\n  });\n};\nexport const submitReply = async (source, externalId, reviewId, replyData) => {\n  return apiCall(`/reviews/${source}/${externalId}/reply/${reviewId}`, {\n    method: 'POST',\n    body: JSON.stringify(replyData)\n  });\n};\nexport const submitReaction = async (source, externalId, reaction) => {\n  return apiCall(`/movies/reactions/${source}/${externalId}`, {\n    method: 'POST',\n    body: JSON.stringify({\n      reaction\n    })\n  });\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiCall","endpoint","options","response","fetch","headers","data","json","ok","Error","msg","error","console","getCategory","categoryId","getNotices","getMovieDetails","source","externalId","getReviews","submitReview","reviewData","method","body","JSON","stringify","submitReply","reviewId","replyData","submitReaction","reaction"],"sources":["C:/Users/hp/Desktop/new/project/frontend/src/api/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\r\n\r\nconst apiCall = async (endpoint, options = {}) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    });\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      throw new Error(data.msg || 'API request failed');\r\n    }\r\n    return { data };\r\n  } catch (error) {\r\n    console.error(`API error at ${endpoint}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getCategory = async (categoryId) => {\r\n  return apiCall(`/movies/categories/${categoryId}`);\r\n};\r\n\r\nexport const getNotices = async () => {\r\n  return apiCall('/movies/notices');\r\n};\r\n\r\nexport const getMovieDetails = async (source, externalId) => {\r\n  return apiCall(`/movies/details/${source}/${externalId}`);\r\n};\r\n\r\nexport const getReviews = async (source, externalId) => {\r\n  return apiCall(`/reviews/${source}/${externalId}`);\r\n};\r\n\r\nexport const submitReview = async (source, externalId, reviewData) => {\r\n  return apiCall(`/reviews/${source}/${externalId}`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(reviewData),\r\n  });\r\n};\r\n\r\nexport const submitReply = async (source, externalId, reviewId, replyData) => {\r\n  return apiCall(`/reviews/${source}/${externalId}/reply/${reviewId}`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(replyData),\r\n  });\r\n};\r\n\r\nexport const submitReaction = async (source, externalId, reaction) => {\r\n  return apiCall(`/movies/reactions/${source}/${externalId}`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({ reaction }),\r\n  });\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;AAE5D,MAAMC,OAAO,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,GAAGK,QAAQ,EAAE,EAAE;MACzD,GAAGC,OAAO;MACVG,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb;IACF,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,GAAG,IAAI,oBAAoB,CAAC;IACnD;IACA,OAAO;MAAEJ;IAAK,CAAC;EACjB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgBV,QAAQ,GAAG,EAAEU,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAOC,UAAU,IAAK;EAC/C,OAAOd,OAAO,CAAC,sBAAsBc,UAAU,EAAE,CAAC;AACpD,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,OAAOf,OAAO,CAAC,iBAAiB,CAAC;AACnC,CAAC;AAED,OAAO,MAAMgB,eAAe,GAAG,MAAAA,CAAOC,MAAM,EAAEC,UAAU,KAAK;EAC3D,OAAOlB,OAAO,CAAC,mBAAmBiB,MAAM,IAAIC,UAAU,EAAE,CAAC;AAC3D,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOF,MAAM,EAAEC,UAAU,KAAK;EACtD,OAAOlB,OAAO,CAAC,YAAYiB,MAAM,IAAIC,UAAU,EAAE,CAAC;AACpD,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAOH,MAAM,EAAEC,UAAU,EAAEG,UAAU,KAAK;EACpE,OAAOrB,OAAO,CAAC,YAAYiB,MAAM,IAAIC,UAAU,EAAE,EAAE;IACjDI,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,UAAU;EACjC,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAAA,CAAOT,MAAM,EAAEC,UAAU,EAAES,QAAQ,EAAEC,SAAS,KAAK;EAC5E,OAAO5B,OAAO,CAAC,YAAYiB,MAAM,IAAIC,UAAU,UAAUS,QAAQ,EAAE,EAAE;IACnEL,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,SAAS;EAChC,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOZ,MAAM,EAAEC,UAAU,EAAEY,QAAQ,KAAK;EACpE,OAAO9B,OAAO,CAAC,qBAAqBiB,MAAM,IAAIC,UAAU,EAAE,EAAE;IAC1DI,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEK;IAAS,CAAC;EACnC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}